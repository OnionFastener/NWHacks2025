{"version":3,"sources":["images/robot.png","Chatbox.js","Sidebar.js","OnboardingForm.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Chatbox","_ref","messages","updateMessages","activeChat","inputValue","setInputValue","useState","chatAreaRef","useRef","useEffect","current","scrollTop","scrollHeight","handleSubmit","async","trim","updatedMessages","type","text","response","fetch","method","headers","Content-Type","Accept","body","JSON","stringify","data","json","result","error","console","formatText","split","map","line","i","React","createElement","Fragment","key","length","className","style","position","top","left","right","bottom","display","overflow","width","height","flexDirection","padding","ref","flex","overflowY","marginBottom","marginTop","message","index","justifyContent","concat","maxWidth","borderRadius","backgroundColor","color","whiteSpace","wordBreak","minWidth","boxSizing","src","require","alt","gap","zIndex","value","onChange","e","target","onKeyDown","metaKey","ctrlKey","preventDefault","placeholder","border","minHeight","maxHeight","resize","lineHeight","fontSize","rows","Math","min","Sidebar","togglePopup","showPopup","chatHistory","onNewChat","onChatSelect","onDeleteChat","parseGeminiResponse","includes","indexOf","_response$match","_response$match$","_response$match2","_response$match2$","conditions","match","allergies","_response$match3","_response$match3$","_response$match4","_response$match4$","updateUserMedicalData","newInfo","userData","parse","localStorage","getItem","medicalConditions","setItem","fullName","onClick","handleCardButtonClick","_chatHistory$find","find","chat","id","updateCardInfo","clearAllData","window","confirm","clear","location","reload","title","stopPropagation","OnboardingForm","onComplete","step","setStep","formData","setFormData","dateOfBirth","gender","weight","emergencyContact","currentMedications","smokingStatus","alcoholConsumption","primaryConcerns","handleChange","_objectSpread","[object Object]","name","nextStep","prevStep","renderStep","required","App","setChatHistory","setActiveChat","setMessages","isFirstTime","setIsFirstTime","setShowPopup","popupContent","setPopupContent","savedChats","parsedChats","handleNewChat","newChat","Date","now","prev","handleChatSelect","chatId","selectedChat","handleOnboardingComplete","filter","remainingChats","newMessages","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.168b07b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.46fbdd56.png\";","import React, { useState, useEffect, useRef } from 'react';\nimport './styles/Chatbox.css';\n\nconst Chatbox = ({ messages, updateMessages, activeChat }) => {\n    const [inputValue, setInputValue] = useState(\"\");\n    const chatAreaRef = useRef(null);\n\n    // Auto scroll to bottom when messages change\n    useEffect(() => {\n        if (chatAreaRef.current) {\n            chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const handleKeyDown = (e) => {\n        // Check for Command+Enter (Mac) or Control+Enter (Windows)\n        if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit();\n        }\n    };\n\n    const handleSubmit = async () => {\n        if (!inputValue.trim() || !activeChat) return;\n\n        // Add user message immediately\n        const updatedMessages = [...messages, { type: 'user', text: inputValue }];\n        updateMessages(updatedMessages);\n\n        try {\n            const response = await fetch('/get_response/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({ text: inputValue })\n            });\n\n            const data = await response.json();\n            setInputValue(''); // Clear input after sending\n\n            if (data.result) {\n                // Add AI response\n                updateMessages([...updatedMessages, { type: 'ai', text: data.result }]);\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    // Function to format text with newlines\n    const formatText = (text) => {\n        return text.split('\\n').map((line, i) => (\n            <React.Fragment key={i}>\n                {line}\n                {i !== text.split('\\n').length - 1 && <br />}\n            </React.Fragment>\n        ));\n    };\n\n    return (\n        <div className=\"chatbox\" style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: 'flex',\n            overflow: 'hidden'\n        }}>\n            <div style={{\n                width: '1100px',\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                padding: '15px',\n                overflow: 'hidden'\n            }}>\n                <div\n                    ref={chatAreaRef}\n                    className=\"chat-area\"\n                    style={{\n                        flex: 1,\n                        overflowY: 'auto',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        marginBottom: '15px'\n                    }}\n                >\n                    <div style={{\n                        marginTop: 'auto',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        width: '100%'\n                    }}>\n                        {messages.map((message, index) => (\n                            <div\n                                key={index}\n                                style={{\n                                    width: '100%',\n                                    display: 'flex',\n                                    justifyContent: message.type === 'user' ? 'flex-end' : 'flex-start',\n                                    marginBottom: '10px'\n                                }}\n                            >\n                                <div\n                                    className={`message ${message.type}-message`}\n                                    style={{\n                                        display: 'inline-block',\n                                        maxWidth: '70%',\n                                        padding: '10px 15px',\n                                        borderRadius: '10px',\n                                        backgroundColor: message.type === 'user' ? '#0ea5e9' : '#e9ecef',\n                                        color: message.type === 'user' ? 'white' : 'black',\n                                        whiteSpace: 'pre-wrap',\n                                        wordBreak: 'break-word',\n                                        width: 'fit-content',\n                                        minWidth: '40px',\n                                        boxSizing: 'border-box'\n                                    }}\n                                >\n                                    {message.type === 'ai' ? (\n                                        <div className=\"model-response\">\n                                            <img\n                                                src={require('./images/robot.png')}\n                                                alt=\"AI Assistant\"\n                                                className=\"robot-icon\"\n                                            />\n                                            <div className=\"response-content\">\n                                                {formatText(message.text)}\n                                            </div>\n                                        </div>\n                                    ) : (\n                                        formatText(message.text)\n                                    )}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                <div style={{\n                    position: 'relative',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: '10px',\n                    backgroundColor: 'white',\n                    zIndex: 1\n                }}>\n                    <textarea\n                        value={inputValue}\n                        onChange={(e) => setInputValue(e.target.value)}\n                        onKeyDown={handleKeyDown}\n                        placeholder=\"How can MediCompanion help?\"\n                        style={{\n                            padding: '10px',\n                            borderRadius: '5px',\n                            border: '1px solid #ddd',\n                            minHeight: '50px',\n                            maxHeight: '200px',\n                            resize: 'none',\n                            overflow: 'auto',\n                            lineHeight: '1.5',\n                            fontSize: '14px'\n                        }}\n                        rows={Math.min(5, inputValue.split('\\n').length || 1)}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Chatbox;","import React from 'react';\nimport './styles/Sidebar.css';\n\nconst Sidebar = ({ togglePopup, showPopup, chatHistory, activeChat, onNewChat, onChatSelect, onDeleteChat }) => {\n    const clearAllData = () => {\n        if (window.confirm('This will clear all your data and restart the app. Are you sure?')) {\n            localStorage.clear();\n            window.location.reload();\n        }\n    };\n\n    const getUserFirstName = () => {\n        const userData = JSON.parse(localStorage.getItem('userMedicalData')) || {};\n        const fullName = userData.fullName || '';\n        return fullName.split(' ')[0];\n    };\n\n    const updateCardInfo = async () => {\n        const userData = JSON.parse(localStorage.getItem('userMedicalData')) || {};\n        \n        try {\n            const response = await fetch('/update_card_info/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    userData: userData,\n                    chatHistory: chatHistory.find(chat => chat.id === activeChat)?.messages || []\n                })\n            });\n\n            const data = await response.json();\n            if (data.result && data.result !== 'No new medical information detected.') {\n                // Parse the response and update localStorage\n                const newInfo = parseGeminiResponse(data.result);\n                updateUserMedicalData(newInfo);\n            }\n            togglePopup();\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    const parseGeminiResponse = (response) => {\n        // First, check if NEW_CONDITIONS appears in the allergies section\n        const hasConditionsInAllergies = response.includes('NEW_CONDITIONS:') && \n            response.indexOf('NEW_CONDITIONS:') < response.indexOf('NEW_ALLERGIES:');\n\n        if (hasConditionsInAllergies) {\n            // If conditions appear first, extract them carefully\n            const conditions = response.match(/NEW_CONDITIONS:\\s*(.+?)(?=NEW_ALLERGIES:|$)/s)?.[1]?.trim() || '';\n            // Then get allergies after the NEW_ALLERGIES tag\n            const allergies = response.match(/NEW_ALLERGIES:\\s*(.+?)$/s)?.[1]?.trim() || '';\n            return { allergies, conditions };\n        } else {\n            // Normal case - allergies first, then conditions\n            const allergies = response.match(/NEW_ALLERGIES:\\s*(.+?)(?=NEW_CONDITIONS:|$)/s)?.[1]?.trim() || '';\n            const conditions = response.match(/NEW_CONDITIONS:\\s*(.+?)$/s)?.[1]?.trim() || '';\n            return { allergies, conditions };\n        }\n    };\n\n    const updateUserMedicalData = (newInfo) => {\n        const userData = JSON.parse(localStorage.getItem('userMedicalData')) || {};\n        \n        if (newInfo.allergies) {\n            userData.allergies = userData.allergies \n                ? `${userData.allergies}, ${newInfo.allergies}`\n                : newInfo.allergies;\n        }\n        \n        if (newInfo.conditions) {\n            userData.medicalConditions = userData.medicalConditions \n                ? `${userData.medicalConditions}, ${newInfo.conditions}`\n                : newInfo.conditions;\n        }\n        \n        localStorage.setItem('userMedicalData', JSON.stringify(userData));\n    };\n\n    const handleCardButtonClick = () => {\n        updateCardInfo();\n    };\n\n    return (\n        <div className=\"sidebar\">\n            <h1 className=\"app-title\">{getUserFirstName()}'s\n            Health Companion</h1>\n\n            <button className=\"action-button\" onClick={handleCardButtonClick}>\n                {showPopup ? 'Close Medical ID' : 'Open Medical ID'}\n            </button>\n            <button \n                className=\"action-button\" \n                onClick={clearAllData}\n                style={{ backgroundColor: '#fee2e2', color: '#dc2626' }}\n            >\n                Reset All Data\n            </button>\n            <button className=\"new-chat-button\" onClick={onNewChat}>+ New Chat</button>\n            <div className=\"chat-history\">\n                {chatHistory.map((chat) => (\n                    <div \n                        key={chat.id}\n                        className={`chat-history-item ${chat.id === activeChat ? 'active' : ''}`}\n                        onClick={() => onChatSelect(chat.id)}\n                    >\n                        <span className=\"chat-title\">{chat.title}</span>\n                        <button \n                            className=\"delete-chat-button\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                onDeleteChat(chat.id);\n                            }}\n                        >\n                            ×\n                        </button>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Sidebar;","import React, { useState } from 'react';\nimport './styles/OnboardingForm.css';\n\nconst OnboardingForm = ({ onComplete }) => {\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    fullName: '',\n    dateOfBirth: '',\n    gender: '',\n    height: '',\n    weight: '',\n    emergencyContact: '',\n    allergies: '',\n    medicalConditions: '',\n    currentMedications: '',\n    smokingStatus: '',\n    alcoholConsumption: '',\n    primaryConcerns: ''\n  });\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    localStorage.setItem('userMedicalData', JSON.stringify(formData));\n    onComplete();\n  };\n\n  const nextStep = () => setStep(step + 1);\n  const prevStep = () => setStep(step - 1);\n\n  const renderStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <div className=\"form-step\">\n            <h2>Basic Information</h2>\n            <input\n              type=\"text\"\n              name=\"fullName\"\n              placeholder=\"Full Name\"\n              value={formData.fullName}\n              onChange={handleChange}\n              required\n            />\n            <input\n              type=\"date\"\n              name=\"dateOfBirth\"\n              value={formData.dateOfBirth}\n              onChange={handleChange}\n              required\n            />\n            <input\n              type=\"text\"\n              name=\"emergencyContact\"\n              placeholder=\"Emergency Contact\"\n              value={formData.emergencyContact}\n              onChange={handleChange}\n              required\n            />\n            <select name=\"gender\" value={formData.gender} onChange={handleChange} required>\n              <option value=\"\">Select Gender</option>\n              <option value=\"male\">Male</option>\n              <option value=\"female\">Female</option>\n              <option value=\"other\">Other</option>\n            </select>\n            <button onClick={nextStep}>Next</button>\n          </div>\n        );\n      case 2:\n        return (\n          <div className=\"form-step\">\n            <h2>Physical Information</h2>\n            <input\n              type=\"number\"\n              name=\"height\"\n              placeholder=\"Height (cm)\"\n              value={formData.height}\n              onChange={handleChange}\n              required\n            />\n            <input\n              type=\"number\"\n              name=\"weight\"\n              placeholder=\"Weight (kg)\"\n              value={formData.weight}\n              onChange={handleChange}\n              required\n            />\n            <button onClick={prevStep}>Back</button>\n            <button onClick={nextStep}>Next</button>\n          </div>\n        );\n      case 3:\n        return (\n          <div className=\"form-step\">\n            <h2>Medical Information</h2>\n            <textarea\n              name=\"allergies\"\n              placeholder=\"Known Allergies (if any)\"\n              value={formData.allergies}\n              onChange={handleChange}\n            />\n            <textarea\n              name=\"medicalConditions\"\n              placeholder=\"Current Medical Conditions (if any)\"\n              value={formData.medicalConditions}\n              onChange={handleChange}\n            />\n            <textarea\n              name=\"currentMedications\"\n              placeholder=\"Current Medications (if any)\"\n              value={formData.currentMedications}\n              onChange={handleChange}\n            />\n            <button onClick={prevStep}>Back</button>\n            <button onClick={handleSubmit}>Complete</button>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"onboarding-container\">\n      <div className=\"onboarding-form\">\n        <h1>Welcome to MediCompanion</h1>\n        <p>Let's get to know you better to provide personalized medical assistance</p>\n        {renderStep()}\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingForm; ","import React, { useState, useEffect } from 'react';\nimport Chatbox from './Chatbox';\nimport Sidebar from './Sidebar';\nimport OnboardingForm from './OnboardingForm';\nimport './styles/App.css';\n\nfunction App() {\n  \n  const [chatHistory, setChatHistory] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isFirstTime, setIsFirstTime] = useState(true);\n  const [showPopup, setShowPopup] = useState(false);\n  const [popupContent, setPopupContent] = useState({\n    name: '',\n    dateOfBirth: '',\n    height: '',\n    weight: '',\n    emergencyContact: '',\n    allergies: '',\n    medicalConditions: '',\n    currentMedications: ''\n  });\n\n  const togglePopup = () => {\n    if (!showPopup) {\n      const userData = JSON.parse(localStorage.getItem('userMedicalData')) || {};\n      \n      setPopupContent({\n        name: userData.fullName || 'Not provided',\n        dateOfBirth: userData.dateOfBirth || 'Not provided',\n        height: userData.height ? `${userData.height} cm` : 'Not provided',\n        weight: userData.weight ? `${userData.weight} kg` : 'Not provided',\n        emergencyContact: userData.emergencyContact || 'Not provided',\n        allergies: userData.allergies || 'None reported',\n        medicalConditions: userData.medicalConditions || 'None reported',\n        currentMedications: userData.currentMedications || 'None reported'\n      });\n    }\n    setShowPopup(!showPopup);\n  }\n\n  const calculateAge = (birthDate) => {\n    const today = new Date();\n    const birth = new Date(birthDate);\n    let age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n      age--;\n    }\n    return age;\n  };\n\n  useEffect(() => {\n    // Check if user has completed onboarding\n    const userData = localStorage.getItem('userMedicalData');\n    if (userData) {\n      setIsFirstTime(false);\n      // Load chat history\n      const savedChats = localStorage.getItem('chats');\n      if (savedChats) {\n        const parsedChats = JSON.parse(savedChats);\n        setChatHistory(parsedChats);\n        if (parsedChats.length > 0) {\n          setActiveChat(parsedChats[0].id);\n          setMessages(parsedChats[0].messages || []);\n        }\n      } else {\n        handleNewChat();\n      }\n    }\n  }, []);\n\n  // Save chats whenever they change\n  useEffect(() => {\n    if (chatHistory.length > 0) {\n      localStorage.setItem('chats', JSON.stringify(chatHistory));\n    }\n  }, [chatHistory]);\n\n  const handleNewChat = () => {\n    const newChat = {\n      id: Date.now(),\n      title: `Chat ${chatHistory.length + 1}`,\n      messages: []\n    };\n    setChatHistory(prev => [...prev, newChat]);\n    setActiveChat(newChat.id);\n    setMessages([]);\n  };\n\n  const handleChatSelect = (chatId) => {\n    const selectedChat = chatHistory.find(chat => chat.id === chatId);\n    if (selectedChat) {\n      setActiveChat(chatId);\n      setMessages(selectedChat.messages || []);\n    }\n  };\n\n  const handleDeleteChat = (chatId) => {\n    setChatHistory(prev => prev.filter(chat => chat.id !== chatId));\n    if (activeChat === chatId) {\n      const remainingChats = chatHistory.filter(chat => chat.id !== chatId);\n      if (remainingChats.length > 0) {\n        handleChatSelect(remainingChats[0].id);\n      } else {\n        handleNewChat();\n      }\n    }\n  };\n\n  const updateMessages = (newMessages) => {\n    setMessages(newMessages);\n    setChatHistory(prev => prev.map(chat => \n      chat.id === activeChat \n        ? { ...chat, messages: newMessages }\n        : chat\n    ));\n  };\n\n  const handleOnboardingComplete = () => {\n    setIsFirstTime(false);\n    handleNewChat();\n  };\n\n  return (\n    <div className=\"app\">\n      {isFirstTime ? (\n        <OnboardingForm onComplete={handleOnboardingComplete} />\n      ) : (\n        <>\n          <Sidebar \n            togglePopup={togglePopup} \n            showPopup={showPopup}\n            chatHistory={chatHistory}\n            activeChat={activeChat}\n            onNewChat={handleNewChat}\n            onChatSelect={handleChatSelect}\n            onDeleteChat={handleDeleteChat}\n          />\n          <Chatbox \n            messages={messages}\n            updateMessages={updateMessages}\n            activeChat={activeChat}\n          />\n          {showPopup && (\n            <div className=\"popup-card\">\n              <h2>Medical ID</h2>\n              <div className=\"popup-content\">\n                <div className=\"info-section basic-info\">\n                  <p><strong>Name:</strong> {popupContent.name}</p>\n                  <p><strong>Date of Birth:</strong> {popupContent.dateOfBirth}</p>\n                  <p><strong>Height:</strong> {popupContent.height}</p>\n                  <p><strong>Weight:</strong> {popupContent.weight}</p>\n                  <p><strong>Emergency Contact:</strong> {popupContent.emergencyContact}</p>\n                </div>\n                <div className=\"info-section\">\n                  <h3>Allergies</h3>\n                  <p>{popupContent.allergies}</p>\n                </div>\n                <div className=\"info-section\">\n                  <h3>Medical Conditions</h3>\n                  <p>{popupContent.medicalConditions}</p>\n                </div>\n                <div className=\"info-section\">\n                  <h3>Current Medications</h3>\n                  <p>{popupContent.currentMedications}</p>\n                </div>\n              </div>\n              <button onClick={togglePopup}>Close</button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}